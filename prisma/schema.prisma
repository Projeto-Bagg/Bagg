generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  active   Boolean @default(true)
  user     User?
  admin    Admin?
}

model User {
  id                 Int                  @id
  createdAt          DateTime             @default(now())
  username           String               @unique
  fullName           String
  birthdate          DateTime
  image              String?
  emailVerified      Boolean              @default(false)
  bio                String?
  cityId             Int?
  account            Account              @relation(fields: [accountId], references: [id])
  accountId          Int                  @unique
  city               City?                @relation(fields: [cityId], references: [id])
  diaryPosts         DiaryPost[]
  followers          Follow[]             @relation("following")
  following          Follow[]             @relation("follower")
  tipLikes           TipLike[]
  tips               Tip[]
  tipComments        TipComment[]
  diaryPostLikes     DiaryPostLike[]
  tripDiaries        TripDiary[]
  cityVisits         CityVisit[]
  cityInterests      CityInterest[]
  userSubscribesPlan UserSubscribesPlan[]
  diaryPostReport    DiaryPostReport[]
  tipReport          TipReport[]
  tipCommentReport   TipCommentReport[]
}

model Admin {
  id        Int     @id
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int     @unique
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id], onUpdate: NoAction)
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model TripDiary {
  id         Int         @id @default(autoincrement())
  title      String
  createdAt  DateTime    @default(now())
  message    String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  city       City        @relation(fields: [cityId], references: [id], onUpdate: NoAction)
  cityId     Int
  diaryPosts DiaryPost[]
}

model DiaryPost {
  id              Int               @id @default(autoincrement())
  message         String
  createdAt       DateTime          @default(now())
  user            User              @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId          Int
  tripDiary       TripDiary         @relation(fields: [tripDiaryId], references: [id], onDelete: Cascade)
  tripDiaryId     Int
  status          String            @default("active")
  softDelete      Boolean           @default(false)
  likedBy         DiaryPostLike[]
  diaryPostMedias DiaryPostMedia[]
  diaryPostReport DiaryPostReport[]
}

model DiaryPostReport {
  id          Int       @id @default(autoincrement())
  diaryPost   DiaryPost @relation(fields: [diaryPostId], references: [id], onDelete: Cascade)
  diaryPostId Int
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId      Int
  reason      String

  @@unique([userId, diaryPostId])
}

model DiaryPostMedia {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  url         String
  diaryPost   DiaryPost @relation(fields: [diaryPostId], references: [id], onDelete: Cascade)
  diaryPostId Int
}

model DiaryPostLike {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId      Int
  diaryPost   DiaryPost @relation(fields: [diaryPostId], references: [id], onDelete: Cascade)
  diaryPostId Int
  createdAt   DateTime  @default(now())

  @@unique([userId, diaryPostId])
}

model Tip {
  id          Int          @id @default(autoincrement())
  message     String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime     @default(now())
  tags        String?
  status      String       @default("active")
  softDelete  Boolean      @default(false)
  cityId      Int
  city        City         @relation(fields: [cityId], references: [id], onUpdate: NoAction)
  likedBy     TipLike[]
  tipComments TipComment[]
  tipMedias   TipMedia[]
  tipWord     TipWord[]
  tipReport   TipReport[]
}

model TipReport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  tip       Tip      @relation(fields: [tipId], references: [id], onUpdate: NoAction)
  tipId     Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reason    String

  @@unique([userId, tipId])
}

model TipMedia {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  url       String
  tip       Tip      @relation(fields: [tipId], references: [id], onDelete: Cascade)
  tipId     Int
}

model TipLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId    Int
  tip       Tip      @relation(fields: [tipId], references: [id], onDelete: Cascade)
  tipId     Int
  createdAt DateTime @default(now())

  @@unique([userId, tipId])
}

model TipComment {
  id               Int                @id @default(autoincrement())
  user             User               @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId           Int
  tip              Tip                @relation(fields: [tipId], references: [id], onDelete: Cascade)
  tipId            Int
  message          String
  createdAt        DateTime           @default(now())
  status           String             @default("active")
  softDelete       Boolean            @default(false)
  tipCommentReport TipCommentReport[]
}

model TipCommentReport {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  tipComment   TipComment @relation(fields: [tipCommentId], references: [id], onUpdate: NoAction)
  tipCommentId Int
  user         User       @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId       Int
  reason       String

  @@unique([userId, tipCommentId])
}

model Continent {
  id      Int       @id
  name    String
  Country Country[]
}

model Country {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  iso2        String     @unique
  capital     String
  latitude    Float
  longitude   Float
  regions     Region[]
  continent   Continent? @relation(fields: [continentId], references: [id])
  continentId Int?
}

model Region {
  id        Int     @id @default(autoincrement())
  name      String
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int
  latitude  Float
  longitude Float
  cities    City[]
}

model City {
  id            Int            @id @default(autoincrement())
  name          String
  region        Region         @relation(fields: [regionId], references: [id], onUpdate: NoAction)
  regionId      Int
  latitude      Float
  longitude     Float
  cityVisits    CityVisit[]
  cityInterests CityInterest[]
  tips          Tip[]
  users         User[]
  tripDiary     TripDiary[]
}

model CityVisit {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  city      City     @relation(fields: [cityId], references: [id], onUpdate: NoAction)
  cityId    Int
  rating    Int?
  message   String?
  createdAt DateTime @default(now())

  @@unique([userId, cityId])
}

model CityInterest {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  city      City     @relation(fields: [cityId], references: [id], onUpdate: NoAction)
  cityId    Int
  createdAt DateTime @default(now())

  @@unique([userId, cityId])
}

model SubscriptionPlan {
  id                 Int                  @id @default(autoincrement())
  planName           String               @unique
  price              Float
  description        String
  createdAt          DateTime             @default(now())
  userSubscribesPlan UserSubscribesPlan[]
}

model UserSubscribesPlan {
  id                 Int              @id @default(autoincrement())
  subscriptionDate   DateTime         @default(now())
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId Int
  user               User             @relation(fields: [userId], references: [id])
  userId             Int
}

model TipWord {
  id        Int      @id @default(autoincrement())
  tips      Tip[]
  word      String
  createdAt DateTime @default(now())
}
