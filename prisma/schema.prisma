generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  fullName       String
  username       String          @unique
  email          String          @unique
  birthdate      DateTime
  image          String?
  emailVerified  Boolean         @default(false)
  createdAt      DateTime        @default(now())
  password       String
  bio            String?
  diaryPosts     DiaryPost[]
  followers      Follow[]        @relation("following")
  following      Follow[]        @relation("follower")
  tipLikes       TipLike[]
  tips           Tip[]
  tipComments    TipComment[]
  diaryPostLikes DiaryPostLike[]
  tripDiaries    TripDiary[]
  cityVisits     CityVisit[]
  cityInterests  CityInterest[]
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id], onUpdate: NoAction)
  followingId Int
  createdAt   DateTime @default(now())
}

model DiaryPost {
  id              Int              @id @default(autoincrement())
  title           String?
  message         String?
  createdAt       DateTime         @default(now())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  tripDiary       TripDiary        @relation(fields: [tripDiaryId], references: [id], onUpdate: NoAction)
  tripDiaryId     Int
  likedBy         DiaryPostLike[]
  diaryPostMedias DiaryPostMedia[]
}

model TripDiary {
  id         Int         @id @default(autoincrement())
  title      String
  createdAt  DateTime    @default(now())
  message    String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  diaryPosts DiaryPost[]
}

model DiaryPostMedia {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  url         String
  diaryPost   DiaryPost @relation(fields: [diaryPostId], references: [id], onDelete: Cascade)
  diaryPostId Int
}

model TipMedia {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  url       String
  tip       Tip      @relation(fields: [tipId], references: [id], onDelete: Cascade)
  tipId     Int
}

model DiaryPostLike {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      DiaryPost @relation(fields: [postId], references: [id], onUpdate: NoAction)
  postId    Int
  createdAt DateTime? @default(now())
  tip       Tip       @relation(fields: [tipId], references: [id], onUpdate: NoAction)
  tipId     Int
}

model TipLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  tip       Tip      @relation(fields: [tipId], references: [id], onUpdate: NoAction)
  tipId     Int
  createdAt DateTime @default(now())
}

model Tip {
  id             Int             @id @default(autoincrement())
  title          String?
  message        String?
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  createdAt      DateTime        @default(now())
  likedBy        TipLike[]
  tipComments    TipComment[]
  tipMedias      TipMedia[]
  diaryPostLikes DiaryPostLike[]
}

model Country {
  id       Int    @id @default(autoincrement())
  name     String @unique
  iso2     String @unique
  capital  String
  region   Region @relation(fields: [regionId], references: [id])
  regionId Int
  City     City[]
}

model Region {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  country Country[]
  cities  City[]
}

model State {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  countryIso2 String
  latitude    Float
  longitude   Float
  type        String?
}

model City {
  id            Int            @id @default(autoincrement())
  name          String
  country       Country        @relation(fields: [countryId], references: [id], onUpdate: NoAction)
  countryId     Int
  region        Region         @relation(fields: [regionId], references: [id], onUpdate: NoAction)
  regionId      Int
  cityVisits    CityVisit[]
  cityInterests CityInterest[]
}

model TipComment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  tip       Tip      @relation(fields: [tipId], references: [id], onUpdate: NoAction)
  tipId     Int      @unique
  message   String
  createdAt DateTime @default(now())
}

model CityVisit {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  city    City   @relation(fields: [cityId], references: [id])
  cityId  Int
  rating  Int
  message String
}

model CityInterest {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  city      City     @relation(fields: [cityId], references: [id])
  cityId    Int
  createdAt DateTime @default(now())
}
